# This example shows how to use compost with **Atlantis v0.18**, Conftest, and Infracost to enforce cost policies.

# To run this:
# 1. Add the yaml contents of this file to your `repos.yaml` or `atlantis.yaml` server side config file.
# 2. On the Atlantis server, export env vars for:
#    export GITHUB_TOKEN=<your-github-token>
#    export INFRACOST_API_KEY=<your-infracost-api-token>
# 3. Run the `infracost/infracost-atlantis` image, which includes the Infracost and Compost CLIs in addition to Atlantis:
#    docker run -p 4141:4141 -e GITHUB_TOKEN=$GITHUB_TOKEN -e INFRACOST_API_KEY=$INFRACOST_API_KEY \
#      --mount type=bind,source=$(pwd)/examples/conftest.yml,target=/home/atlantis/repo.yml \
#      infracost/infracost-atlantis:latest \
#      --gh-user=<your-github-user> \
#      --gh-token=$GITHUB_TOKEN \
#      --gh-webhook-secret=<your-github-webhook-secret> \
#      --repo-allowlist='github.com/your-org/*' --repo-config=/home/atlantis/repo.yml
# 4. Send a pull request in GitHub to change something in TF, the Infracost pull request comment should be added.
# 5. Experiment with different cost policies by editing the policy file generated in the pre_workflow_hook.

workflows:
  terraform-infracost:
    policy_check:
      steps:
        - env:
            name: INFRACOST_JSON
            command: 'echo $REPO_REL_DIR-$WORKSPACE-infracost.json'
        - show
        - run: echo "Generating Infracost cost estimates for $REPO_REL_DIR/$WORKSPACE..."
        - run: infracost breakdown --path=$SHOWFILE --format=json --out-file=$INFRACOST_JSON --log-level=warn --no-color
        - policy_check:
            extra_args: [ "-p /tmp/policy", "--namespace", "infracost", "$INFRACOST_JSON" ]
        - run: rm -rf $INFRACOST_JSON
repos:
  - id: /.*/
    workflow: terraform-infracost
    # In a production setup the policies would use a separate vcs & mount into container.  To keep things easy for
    # this example, we use a pre_workflow_hook to create a policy file under /tmp.
    pre_workflow_hooks:
      - run: mkdir -p /tmp/policy
      - run: |
          cat >/tmp/policy/policy.rego <<EOF
          package infracost

          deny_totalDiff[msg] {
          	maxDiff = 15.0
          	to_number(input.diffTotalMonthlyCost) >= maxDiff

          	msg := sprintf(
          		"Total monthly cost diff must be < $%.2f (actual diff is $%v)",
          		[maxDiff, to_number(input.diffTotalMonthlyCost)],
          	)
          }

          deny_instanceCost[msg] {
          	r := input.projects[_].breakdown.resources[_]
          	startswith(r.name, "aws_instance.")

          	maxHourlyCost := 2.0
          	to_number(r.hourlyCost) > maxHourlyCost

          	msg := sprintf(
          		"AWS instances must cost less than $%.2f\\\\hr (%s costs $%v\\\\hr).",
          		[maxHourlyCost, r.name, to_number(r.hourlyCost)],
          	)
          }

          deny_instanceCost[msg] {
          	r := input.projects[_].breakdown.resources[_]
          	startswith(r.name, "aws_instance.")

          	baseHourlyCost := to_number(r.costComponents[_].hourlyCost)

          	sr_cc := r.subresources[_].costComponents[_]
          	sr_cc.name == "Provisioned IOPS"
          	iopsHourlyCost := to_number(sr_cc.hourlyCost)

          	iopsHourlyCost > baseHourlyCost

          	msg := sprintf(
          		"AWS instance IOPS must cost less than compute usage (%s IOPS $%v\\\\hr, usage $%v\\\\hr).",
          		[r.name, iopsHourlyCost, baseHourlyCost],
          	)
          }
          EOF
policies:
  owners:
    users:
      - example-dev
  policy_sets:
    - name: infracost-tests
      path: /tmp/policy
      source: local
